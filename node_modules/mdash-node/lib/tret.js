(function() {
  var Lib, Tret;

  Lib = require('./lib');

  module.exports = Tret = (function() {
    Tret.prototype.rules = {};

    Tret.prototype.classes = {};

    Tret.prototype.settings = {};

    Tret.prototype.order = 5;

    function Tret(options) {
      if ((options != null) && typeof options === 'objects') {
        this.set(options);
      }
      return;
    }

    Tret.prototype.apply = function(text, options) {
      var id, k, opts, pattern, replacement, result, rule, self, _i, _len, _ref, _ref1;
      if (options == null) {
        options = {};
      }
      self = this;
      _ref = this.getRuleNames(options);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        id = _ref[_i];
        rule = this.rules[id];
        opts = options[id] || {};
        if (opts['disabled']) {
          continue;
        }
        if (rule["function"] != null) {
          result = rule["function"].call(self, text, opts);
          if (typeof result !== 'string') {
            throw new Error("Custom function did not return string. Result is " + (typeof result));
            continue;
          }
          text = result;
        }
        if (rule.pattern != null) {
          _ref1 = rule.pattern;
          for (k in _ref1) {
            pattern = _ref1[k];
            replacement = typeof rule.replacement === 'object' ? rule.replacement[k] || rule.replacement[0] : rule.replacement;
            result = text.replace(pattern, typeof replacement === 'string' ? replacement : function() {
              return replacement.call(self, arguments, opts);
            });
            if (typeof result === 'string') {
              text = result;
            }
          }
        }
      }
      return text;
    };

    Tret.prototype.getRuleNames = function(options) {
      var self;
      if (options == null) {
        options = {};
      }
      self = this;
      return Object.keys(this.rules).sort(function(a, b) {
        var _ref, _ref1;
        return (((_ref = options[a]) != null ? _ref['order'] : void 0) || 5) - (((_ref1 = options[b]) != null ? _ref1['order'] : void 0) || 5);
      });
    };

    return Tret;

  })();

}).call(this);
